
 //Usage: @include font-face('gotham', '/fonts/gotham');
@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) { 
  @font-face {
    font-family: quote($font-name);
    src: url($file-name + '.eot');
    src: url($file-name + '.eot?#iefix')  format('embedded-opentype'),
         url($file-name + '.woff') format('woff'),
         url($file-name + '.ttf')  format('truetype'),
         url($file-name + '.svg##{$font-name}')  format('svg');
    font-weight: $weight;
    font-style: $style;
  }
 }

@function px2rem($size) {
  $remSize: $size / 10px;
  @return $remSize * 1rem;
}

// Usage: @include font-size(14px)
@mixin font-size($size) {
  font-size: $size; // fallback for browsers that dont support rem
  font-size: px2rem($size);
}

@mixin input-placeholder {
	&.placeholder { @content; }
	&:-moz-placeholder { @content; }
	&::-moz-placeholder { @content; }
	&:-ms-input-placeholder { @content; }
	&::-webkit-input-placeholder { @content; }
}

/*
Usage:

@include mq('tablet') {
	padding-top: 4rem;
	font-size: 2.4rem;
}
*/
@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

// Define vertical, horizontal, or both position
@mixin center($position) {
  position: absolute;
  
  @if $position == 'vertical' {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  }
  @else if $position == 'horizontal' {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  }
  @else if $position == 'both' {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}

// Simple effective hardware acceleration mixin @include hardware
@mixin hardware($backface: true, $perspective: 1000) {
	@if $backface {
			backface-visibility: hidden;
	}
	perspective: $perspective;
}

// Hide from screenreaders and browsers
@mixin hidden {
	display: none;
	visibility: hidden;
}

@mixin truncate($truncation-boundary) {
	max-width: $truncation-boundary;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

@mixin selection {
	::-moz-selection { @content; }
	::selection { @content; }
}

@mixin unselectable {
	-webkit-touch-callout: none;
	user-select: none;
}



@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
	@include pseudo($pos: $position);
	width: 0;
	height: 0;
	@if $round {
			border-radius: 3px;
	}
	@if $direction == down {
			border-left: $size solid transparent;
			border-right: $size solid transparent;
			border-top: $size solid $color;
			margin-top: 0 - round( $size / 2.5 );
	} @else if $direction == up {
			border-left: $size solid transparent;
			border-right: $size solid transparent;
			border-bottom: $size solid $color;
			margin-bottom: 0 - round( $size / 2.5 );
	} @else if $direction == right {
			border-top: $size solid transparent;
			border-bottom: $size solid transparent;
			border-left: $size solid $color;
			margin-right: -$size;
	} @else if  $direction == left {
			border-top: $size solid transparent;
			border-bottom: $size solid transparent;
			border-right: $size solid $color;
			margin-left: -$size;
	}
}